@using Sandbox;
@using Sandbox.UI;
@using System.Collections.Generic;
@using System.Linq;

@using Player = Cinema.Player

@namespace Cinema.UI

<style>
	iconpanel {
		font-family: "Material Icons";
	}

	$rounding: 0px;

	Chat {
		position: absolute;
		bottom: 256px;
		left: 32px;
		z-index: 1001;
		flex-direction: column;
		width: 505px;
		max-height: 435px;
		font-family: SourceSansPro-SemiBold;
		text-stroke: 4px rgba(32,32,32,0.7);
		font-size: 16px;
		pointer-events: none;
		transition: all 0.1s ease, border 0s ease;
		overflow: hidden;
		color: white;

		textentry {
			transition: opacity 0.1s ease;
			flex-shrink: 0;
			min-height: 44px;
			opacity: 0;
			background-color: rgba(32,32,32,0.7);
			align-items: center;
			padding: 8px;
		}

		.placeholder {
			color: #c0cee7;
		}

		.content-label {
			margin-left: 1px;
		}

		.placeholder, .content-label {
			font-size: 18px;
			font-family: SourceSansPro-SemiBold;
			text-stroke: 4px rgba(32,32,32,0.7);
			font-weight: 400;
		}

		.canvas {
			flex-direction: column;
			align-items: flex-start;
			overflow: scroll;

			ChatRow {
				align-items: center;
				max-width: 100%;
				color: white;
				opacity: 1;
				flex-shrink: 0;
				padding: 8px 10px;
				transition: opacity 0.15s ease;

				.header {
					flex-shrink: 0;
					flex-grow: 0;
					padding-left: 4px;
					font-weight: 800;
					font-size: 25px;
					padding-right: 8px;
				}

				.msg {
					color: white;
					font-size: 25px;
				}

				&.info {
					.header, .msg {
						color: darken( #c0cee7, 20% );
					}
				}

				img {
					flex-shrink: 0;
					height: 32px;
					width: 32px;
					border-radius: 100px;
				}

				.name {
					align-items: center;
					justify-content: center;
					border-radius: 8px;
					padding: 1px;
					padding-right: 10px;
					color: #f3ff82;
				}

				&.noname {
					.name {
						display: none;
					}
				}

				&.stale {
					transition: opacity 1s ease;
					opacity: 0;
				}
			}
		}

		&.open {
			pointer-events: all;
			backdrop-filter-blur: 10px;
			background-color: rgba(16,16,16,0.4);
			left: 32px;
			border-radius: $rounding;

			textentry {
				opacity: 1;
				width: 100%;
				cursor: text;
			}

			.canvas {
				ChatRow {
					transition: opacity 0.1s ease;
					opacity: 1;
				}
			}
		}
	}
</style>

<root>
	<div class="canvas" @ref=Canvas />
	<TextEntry @ref=Input onsubmit=@Submit onblur=@Close />
</root>

@code
{
	public static Chat Current;

	public Panel Canvas { get; protected set; }
	public TextEntry Input { get; protected set; }

	Queue<ChatRow> Rows = new();

	protected int MaxItems => 100;
	protected float MessageLifetime => 10f;

	public bool IsOpen
	{
		get => HasClass( "open" );
		set
		{
			SetClass( "open", value );
			if ( value )
			{
				Input.Focus();
				Input.Text = string.Empty;
				Input.Label.SetCaretPosition( 0 );
			}
		}
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		Canvas.PreferScrollToBottom = true;
		Input.AcceptsFocus = true;
		Input.AllowEmojiReplace = true;

		Current = this;
	}

	public override void Tick()
	{
		if ( Sandbox.Input.Pressed( "Chat" ) )
			Open();

		Input.Placeholder = string.IsNullOrEmpty( Input.Text ) ? "Enter your message..." : string.Empty;
		
		if (Game.LocalPawn is Player ply)
		{
			ply.CurrentlyTyping = HasClass("open") ? Input.Text : "";
		} 
	}

	void Open()
	{
		AddClass( "open" );
		Input.Focus();
		Canvas.TryScrollToBottom();
	}

	void Close()
	{
		RemoveClass("open");
		Input.Blur();
	}

	void Submit()
	{
		Close();

		var msg = Input.Text.Trim();
		Input.Text = "";

		if ( string.IsNullOrWhiteSpace( msg ) )
			return;

		Say( msg );
	}

	public void AddEntry( string name, string message, long playerId = 0, bool isInfo = false, bool isLastWords = false )
	{
		var e = Canvas.AddChild<ChatRow>();

		var player = Game.LocalPawn;
		if ( !player.IsValid() ) return;

		if ( playerId > 0 )
			e.PlayerId = playerId;

		e.Message = message;
		e.Name = $"{name}";
		

		e.SetClass( "noname", string.IsNullOrEmpty( name ) );
		e.SetClass( "info", isInfo );
		e.BindClass( "stale", () => e.Lifetime > MessageLifetime );

		var cl = Game.Clients.ToList().FirstOrDefault( x => x.SteamId == playerId );
		if ( cl.IsValid() )
			e.SetClass( "friend", cl.IsFriend || Game.SteamId == playerId );

		Canvas.TryScrollToBottom();

		Rows.Enqueue( e );

		// Kill an item if we need to
		/*if ( Rows.Count > MaxItems )
			Rows.Dequeue().Delete();*/
	}
}
